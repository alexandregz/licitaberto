{{ define "summary.gohtml" }}
<!doctype html>
<html lang="gl">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Resumo · {{ .Table }}</title>
  <link rel="stylesheet" href="/static/pico.min.css">
  <link rel="stylesheet" href="/static/compact.css">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    header.nav { position: sticky; top: 0; backdrop-filter: blur(6px); }
    .grid { display: grid; gap: 1.25rem; grid-template-columns: repeat(12, 1fr); }
    .card { padding: 1rem; border: 1px solid rgba(0,0,0,.08); border-radius: .5rem; }
    .span-6 { grid-column: span 6; }
    .span-12{ grid-column: span 12; }
    @media (max-width: 1024px){ .span-6{ grid-column: span 12; } }
    canvas { max-height: 360px; }
    .toolbar { display: grid; gap: .75rem; grid-template-columns: 1fr 260px auto; align-items: end; }
    @media (max-width: 840px){ .toolbar { grid-template-columns: 1fr; } }
  </style>

  <script>
  // Plugin: cursor 'pointer' cando hai URL nese índice
  const cursorLinkPlugin = {
    id: 'cursorLinkPlugin',
    afterEvent(chart, args) {
      const els = chart.getActiveElements();
      const urls = chart.options.linkUrls || [];
      chart.canvas.style.cursor = (els && els.length && urls[els[0].index]) ? 'pointer' : 'default';
    }
  };
  Chart.register(cursorLinkPlugin);
  </script>
</head>
<body>
<header class="container-fluid nav">
  <nav>
    <ul><li><strong>Gráficas {{ .concello }} por táboa</strong></li></ul>
    <ul>
      <li><a href="/">Index</a></li>
    </ul>
  </nav>
</header>

<main class="container">
  {{ template "partials/menu" . }}

  <form method="get" action="/summary" class="toolbar" role="search">
    <label>
      <span>Buscar</span>
      <input type="search" name="q" value="{{ .Q }}" placeholder="ex.: adxudicatario, obxecto, importe..." />
    </label>
    <label>
      <span>Táboa</span>
      <select name="table">
        {{ range .Tables }}
          <option value="{{ . }}" {{ if eq $.Table . }}selected{{ end }}>{{ . }}</option>
        {{ end }}
      </select>
    </label>
    <div>
      <button type="submit">Aplicar</button>
      <a role="button" href="/summary">Limpar</a>
      <a role="button" class="secondary" href="/table/{{ .Table }}" id="link_ver_listado">Ver listado</a>
    </div>
  </form>


    <p><small>{{ if .FilesTable }}anexos en <code id="anexos_en_texto">{{ .FilesTable }}</code></small></p>
  {{ end }}

  <div class="grid">
    <section class="card span-12">
      <h3>1. Número de adxudicacións e importes por mes <span id="taboa_num_adxudicacions_mes_a_mes">{{ .Table }}</span></h3>
      <canvas id="chartAdxMensuais"></canvas>
    </section>

    <section class="card span-12">
      <h3>2. Top 20 maiores licitacións (importe)</h3>
      <canvas id="chartTopImportes"></canvas>
      <div id="topLicList" class="muted" style="margin-top:.5rem"></div>
    </section>

    <section class="card span-12">
      <h3>3. Top 10 adxudicatarios por nº de contratos</h3>
      <canvas id="chartAdxudicatarios"></canvas>
    </section>

    <section class="card span-6">
      <h3>4. Nº de contratos por tipo</h3>
      <canvas id="chartTipos"></canvas>
    </section>

    <section class="card span-6">
      <h3>5. Importe total por tipo (€)</h3>
      <canvas id="chartImportes"></canvas>
    </section>

    <section class="card span-6">
      <h3>5. Contratos con anexos PDF</h3>
      <canvas id="chartAnexos"></canvas>
    </section>
  </div>
</main>

<script>
const TiposLabels = {{ .TiposLabels }};
const TiposCounts = {{ .TiposCounts }};
const ImpLabels   = {{ .ImpLabels }};
const ImpTotals   = {{ .ImpTotals }};
const AdxLabels   = {{ .AdxLabels }};
const AdxCounts   = {{ .AdxCounts }};
const AnexosLabels= {{ .AnexosLabels }};
const AnexosCounts= {{ .AnexosCounts }};

const TopLicLabels   = {{ .TopLicLabels }};
const TopLicAmounts  = {{ .TopLicAmounts }};
const TopLicURLs     = {{ .TopLicURLs }};
const TopLicObjects  = {{ .TopLicObjects }};

const AdxMesLabels   = {{ .AdxMesLabels }};
const AdxMesCounts   = {{ .AdxMesCounts }};
const AdxMesImportes = {{ .AdxMesImportes }};

const chTopImportes = new Chart(document.getElementById('chartTopImportes'), {
  type: 'bar',
  data: {
    labels: TopLicLabels, // Agora xa son Obxectos do contrato
    datasets: [{
      label: 'Importe (€)',
      data: TopLicAmounts,
      hoverBackgroundColor: 'rgba(76, 175, 80, 0.7)',
      hoverBorderColor: 'rgba(76, 175, 80, 1)',
      borderWidth: 1
    }]
  },
  options: {
    linkUrls:    TopLicURLs,
    linkObjects: TopLicObjects,
    indexAxis: 'y',
    responsive: true,
    plugins: {
      legend: { display: false },
      tooltip: {
        callbacks: {
          title: (items) => items[0].label, // agora labels = obxectos
          label: (ctx) => 'Importe: ' + new Intl.NumberFormat('es-ES',{style:'currency',currency:'EUR'}).format(ctx.parsed.x),
          afterBody: (items) => {
            const i   = items[0].dataIndex;
            const url = (chTopImportes.options.linkUrls || [])[i] || '';
            const exp = url.split('q=')[1] ? decodeURIComponent(url.split('q=')[1]) : '';

            const objs = items[0].chart.options.linkObjects || [];
            const obj = objs[i];

            return exp ? ['Expediente: ' + exp, 'Objeto: ' + obj] : [];
          }
        }
      }

    },
    scales: {
      x: {
        beginAtZero: true,
        ticks: { callback: v => new Intl.NumberFormat('es-ES',{style:'currency',currency:'EUR'}).format(v) },
        title: { display: true, text: 'Importe' }
      },
      y: { ticks: { autoSkip: false } }
    }
  }
});


const chAdxMensuais = new Chart(document.getElementById('chartAdxMensuais'), {
  type: 'bar',
  data: {
    labels: AdxMesLabels,
    datasets: [
      {
        type: 'bar',
        label: 'Adxudicacións',
        data: AdxMesCounts,
        yAxisID: 'y',
        backgroundColor: 'rgba(33, 150, 243, 0.6)',
        borderColor: 'rgba(33, 150, 243, 1)',
        borderWidth: 1
      },
      {
        type: 'line',
        label: 'Importe total (€)',
        data: AdxMesImportes,
        yAxisID: 'y1',
        borderWidth: 2,
        pointRadius: 2
      }
    ]
  },
  options: {
    responsive: true,
    interaction: { mode: 'index', intersect: false },
    stacked: false,
    scales: {
      y: {
        position: 'left',
        beginAtZero: true,
        title: { display: true, text: 'Nº licitacións' },
        ticks: {
          stepSize: 1,
          callback: v => Number.isInteger(v) ? v : null
        }
      },
      y1: {
        position: 'right',
        beginAtZero: true,
        grid: { drawOnChartArea: false },
        ticks: {
          callback: v => new Intl.NumberFormat('es-ES', { style: 'currency', currency: 'EUR' }).format(v)
        },
        title: { display: true, text: 'Importe total (€)' }
      }
    },
    plugins: { legend: { display: true } }
  }
});




// Click: abre o expediente en nova pestana
document.getElementById('chartTopImportes').addEventListener('click', (evt)=>{
  const pts = chTopImportes.getElementsAtEventForMode(evt, 'nearest', {intersect: true}, true);
  if (!pts.length) return;
  const idx  = pts[0].index;
  const urls = chTopImportes.options.linkUrls || [];   // ← non uses constantes
  const href = urls[idx];
  if (href) window.open(href, '_blank', 'noopener');
});


// Lista textual (seleccionábel/copiábel)
/*
function renderTopList(labels, urls) {
  const el = document.getElementById('topLicList');
  if (!el) return;
  let html = '<ol style="margin:0;padding-left:1.25rem">';
  (labels || []).forEach((lbl, i)=>{
    const href = (urls || [])[i] || '';
    if (href) html += `<li><a href="${href}" target="_blank" rel="noopener">${lbl}</a></li>`;
    else      html += `<li>${lbl}</li>`;
  });
  html += '</ol>';
  el.innerHTML = html;
}
renderTopList(TopLicLabels, TopLicURLs);
*/

// crear charts
const chTipos = new Chart(document.getElementById('chartTipos'), {
  type: 'bar',
  data: { labels: TiposLabels, datasets: [{ label: 'Contratos', data: TiposCounts }] },
  options: { 
    responsive: true,
    interaction: { mode: 'index', intersect: false, axis: 'x' },
    plugins:{ legend:{ display:false }, tooltip: { position: 'nearest' } } 
  }
});
const chImp = new Chart(document.getElementById('chartImportes'), {
  type: 'bar',
  data: { labels: ImpLabels, datasets: [{ label: '€ total', data: ImpTotals }] },
  options: {
    responsive: true,
    interaction: { mode: 'index', intersect: false, axis: 'x' },
    plugins:{ legend:{ display:false }, tooltip: { callbacks: {
      label: (ctx)=> new Intl.NumberFormat('es-ES',{style:'currency',currency:'EUR'}).format(ctx.parsed.y)
    }, position: 'nearest'}},
    scales: { y: { ticks: { callback: (v)=> new Intl.NumberFormat('es-ES').format(v) } } }
  }
});
const chAdx = new Chart(document.getElementById('chartAdxudicatarios'), {
  type: 'bar',
  data: { labels: AdxLabels, datasets: [{ label: 'Contratos', data: AdxCounts }] },
  options: { indexAxis: 'y', responsive: true, plugins:{ legend:{ display:false } }, scales: { x: { beginAtZero: true } } }
});
const chAnx = new Chart(document.getElementById('chartAnexos'), {
  type: 'pie',
  data: { labels: AnexosLabels, datasets: [{ data: AnexosCounts }] },
  options: { responsive: true }
});

// instant search
const form   = document.querySelector('form[role="search"]');
const qInput = form.querySelector('input[name="q"]');
const tSel   = form.querySelector('select[name="table"]');

function debounce(fn, ms){ let t; return (...a)=>{ clearTimeout(t); t=setTimeout(()=>fn(...a), ms); }; }

async function loadSummary() {
  const q = (qInput.value || "").trim();
  const table = tSel.value;
  if (q.length>0 && q.length<3) return; // só dende 3 chars (ou baleiro)

  const params = new URLSearchParams({ q, table });
  const res = await fetch('/api/summary?' + params.toString());
  if (!res.ok) return;
  const data = await res.json();

  // actualizar charts
  chTipos.data.labels = data.tiposLabels || [];
  chTipos.data.datasets[0].data = data.tiposCounts || [];
  chTipos.update();

  chImp.data.labels = data.impLabels || [];
  chImp.data.datasets[0].data = data.impTotals || [];
  chImp.update();

  chAdx.data.labels = data.adxLabels || [];
  chAdx.data.datasets[0].data = data.adxCounts || [];
  chAdx.update();

  chAnx.data.labels = data.anexosLabels || [];
  chAnx.data.datasets[0].data = data.anexosCounts || [];
  chAnx.update();

  // Top 20 por importe (obxecto como label)
  chTopImportes.options.linkUrls    = data.topLicUrls    || [];
  chTopImportes.options.linkObjects = data.topLicObjects || [];
  chTopImportes.data.labels = data.topLicLabels || [];
  chTopImportes.data.datasets[0].data = data.topLicAmounts || [];
  chTopImportes.update();


  // mes a mes importe+num licitacions
  chAdxMensuais.data.labels = data.adxMesLabels || [];
  chAdxMensuais.data.datasets[0].data = data.adxMesCounts || [];
  chAdxMensuais.data.datasets[1].data = data.adxMesImportes || [];
  chAdxMensuais.update();

  // actualizar URL sen recargar
  const url = new URL(location.href);
  if (q) url.searchParams.set('q', q); else url.searchParams.delete('q');
  url.searchParams.set('table', table);
  history.replaceState(null, '', url);
}

const loadDebounced = debounce(loadSummary, 180);

// impedir recarga co botón "Aplicar"
form.addEventListener('submit', (e)=>{ e.preventDefault(); loadSummary(); });

// instant search: 3+ chars
qInput.addEventListener('input', loadDebounced);

// cambio de táboa → refrescar xa
tSel.addEventListener('change', ()=>{ 
                                        qInput.value = qInput.value.trim(); 
                                        document.getElementById('anexos_en_texto').innerText = tSel.value + '_files';
                                        document.getElementById('link_ver_listado').href = '/table/' + tSel.value;
                                        document.getElementById('taboa_num_adxudicacions_mes_a_mes').innerText = tSel.value; 
                                        loadSummary(); 
                                    });
</script>

</body>
</html>
{{ end }}

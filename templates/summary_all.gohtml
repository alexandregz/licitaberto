{{ define "summary_all.gohtml" }}
<!doctype html>
<html lang="gl">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Resumo global ¬∑ {{ .concello }}</title>
  <link rel="stylesheet" href="/static/pico.min.css">
  <link rel="stylesheet" href="/static/compact.css">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    header.nav { position: sticky; top: 0; backdrop-filter: blur(6px); }
    .grid { display: grid; gap: 1.25rem; grid-template-columns: repeat(12, 1fr); }
    .card { padding: 1rem; border: 1px solid rgba(0,0,0,.08); border-radius: .5rem; }
    .span-6 { grid-column: span 6; }
    .span-12{ grid-column: span 12; }
    @media (max-width: 1024px){ .span-6{ grid-column: span 12; } }
    canvas { max-height: 360px; }
    .toolbar { display: grid; gap: .75rem; grid-template-columns: 1fr auto; align-items: end; }
  </style>
  <script>
  // Plugin: pon cursor "pointer" se o elemento baixo o rato ten URL asociada
  const cursorLinkPlugin = {
    id: 'cursorLinkPlugin',
    afterEvent(chart, args) {
      const ev = args.event;
      const els = chart.getActiveElements();
      const urls = chart.options.linkUrls || [];
      const canvas = chart.canvas;
      let pointer = false;

      if (els && els.length) {
        const idx = els[0].index;
        // Se hai URL para esa etiqueta, activamos o cursor
        if (urls[idx]) pointer = true;
      }
      canvas.style.cursor = pointer ? 'pointer' : 'default';
    }
  };
  Chart.register(cursorLinkPlugin);
  </script>

</head>
<body>
<header class="container-fluid nav">
  <nav>
    <ul><li><strong>Resumo global {{ .concello }}</strong></li></ul>
    <ul>
      <li><a href="/">Index</a></li>
    </ul>
  </nav>
</header>


<main class="container">
  <h2>{{ .concello }} ¬∑ resumo global</h2>

  {{ template "partials/menu" . }}


  <form method="get" action="/summary_all" class="toolbar" role="search">
    <label>
      <span>Buscar (t√≥dalas t√°boas)</span>
      <input type="search" name="q" value="{{ .Q }}" placeholder="ex.: adxudicatario, obxecto, importe..." />
    </label>
    <div>
      <button type="submit">Aplicar</button>
      <a role="button" href="/summary_all">Limpar</a>
    </div>
  </form>

  {{ if .Q }}<p><small>Filtro aplicado: <mark>{{ .Q }}</mark></small></p>{{ end }}

  <div class="grid">
    <section class="card span-12">
      <h3>1. N√∫mero de adxudicaci√≥ns e importes por mes</h3>
      <canvas id="chartAdxMensuais"></canvas>
    </section>

    <section class="card span-6">
      <h3>2. N¬∫ de contratos por tipo</h3>
      <canvas id="chartTipos"></canvas>
    </section>

    <section class="card span-6">
      <h3>3. Importe total por tipo (‚Ç¨)</h3>
      <canvas id="chartImportes"></canvas>
    </section>

    <section class="card span-12">
      <h3>4. Top 10 adxudicatarios contratos menores</h3>
      <canvas id="chartAdxudicatarios"></canvas>
    </section>

  <section class="card span-12">
    <h3>Top 20 maiores licitaci√≥ns (importe)</h3>
    <canvas id="chartTopImportes"></canvas>
    <!-- <div id="topLicList" class="muted" style="margin-top:.5rem"></div> -->
    <script>
    /*
        function renderTopList(labels, urls){
          const el = document.getElementById('topLicList');
          if (!el) return;
          let html = '<ol style="margin:0;padding-left:1.25rem">';
          (labels || []).forEach((lbl, i)=>{
            const href = (urls || [])[i] || '';
            if (href) html += `<li><a href="${href}" target="_blank" rel="noopener">${lbl}</a></li>`;
            else      html += `<li>${lbl}</li>`;
          });
          html += '</ol>';
          el.innerHTML = html;
        }
      renderTopList(TopLicLabels, TopLicURLs);
      */
    </script>
  </section>


    <section class="card span-6">
      <h3>5. Contratos con anexos PDF (global)</h3>
      <canvas id="chartAnexos"></canvas>
    </section>

  </div>
</main>

<script>
// manter referencia global para poder destru√≠r
let chAdxMensuais = null;

// Paleta fixa (bg, border). Engade/axusta cores se queres.
const PALETTE = [
  ['rgba(33,150,243,0.7)','rgba(33,150,243,1)'],   // azul
  ['rgba(76,175,80,0.7)','rgba(76,175,80,1)'],     // verde
  ['rgba(255,152,0,0.7)','rgba(255,152,0,1)'],     // laranxa
  ['rgba(156,39,176,0.7)','rgba(156,39,176,1)'],   // p√∫rpura
  ['rgba(244,67,54,0.7)','rgba(244,67,54,1)'],     // vermello
  ['rgba(0,188,212,0.7)','rgba(0,188,212,1)'],     // cian
  ['rgba(121,85,72,0.7)','rgba(121,85,72,1)'],     // marr√≥n
  ['rgba(63,81,181,0.7)','rgba(63,81,181,1)'],     // √≠ndigo
  ['rgba(205,220,57,0.7)','rgba(205,220,57,1)'],   // lima
  ['rgba(158,158,158,0.7)','rgba(158,158,158,1)'], // gris
];

// Hash determin√≠stico (djb2) ‚Üí √≠ndice de cor est√°bel por nome
function hashStr(s) {
  let h = 5381;
  for (let i = 0; i < s.length; i++) h = ((h << 5) + h) + s.charCodeAt(i);
  // garantir positivo en JS
  return (h >>> 0);
}

// cores fixas
const FIXED = {
  'Alcaldia_contratos_menores': ['rgba(33,150,243,0.7)','rgba(33,150,243,1)'],
  'Xunta_de_Goberno_licitacions': ['rgba(156,39,176,0.7)','rgba(156,39,176,1)'],
};
function colorForSeries(name) {
  if (FIXED[name]) return FIXED[name];
  const idx = hashStr(String(name || '')) % PALETTE.length;
  return PALETTE[idx];
}

// constr√∫e os datasets apilados + li√±a de importes
function buildStackDatasets(series, matrix, importes) {
  const ds = [];
  for (let i = 0; i < (series || []).length; i++) {
    const label = series[i];
    const [bg, border] = colorForSeries(label); // cor fixa por t√°boa
    ds.push({
      type: 'bar',
      label,
      data: (matrix && matrix[i]) ? matrix[i] : [],
      yAxisID: 'y',
      backgroundColor: bg,
      borderColor: border,
      borderWidth: 1,
      hoverBorderWidth: 1,
    });
  }
  // Serie de li√±a para o importe total (‚Ç¨) cunha cor constante
  ds.push({
    type: 'line',
    label: 'Importe total (‚Ç¨)',
    data: importes || [],
    yAxisID: 'y1',
    borderColor: 'rgba(255, 99, 132, 1)',
    backgroundColor: 'rgba(255, 99, 132, 0.25)',
    borderWidth: 2,
    pointRadius: 2,
  });
  return ds;
}

// crea (ou recrea) a gr√°fica mensual desde cero
function renderAdxMensuais(labels, series, matrix, importes) {
  const el = document.getElementById('chartAdxMensuais');
  if (!el) return;

  // üîß matar instancia previa para evitar ‚Äúcacheos‚Äù
  if (chAdxMensuais) {
    chAdxMensuais.destroy();
    chAdxMensuais = null;
  }

  chAdxMensuais = new Chart(el, {
    type: 'bar',
    data: {
      labels: labels || [],
      datasets: buildStackDatasets(series || [], matrix || [], importes || [])
    },
    options: {
      responsive: true,
      animation: false,
      interaction: { mode: 'index', intersect: false, axis: 'x' },
      scales: {
        x: { stacked: true },
        y: {
          stacked: true,
          position: 'left',
          beginAtZero: true,
          title: { display: true, text: 'N¬∫ licitaci√≥ns' },
          ticks: {
            stepSize: 1,
            callback: v => Number.isInteger(v) ? v : null
          }
        },
        y1: {
          position: 'right',
          beginAtZero: true,
          grid: { drawOnChartArea: false },
          ticks: {
            callback: v => new Intl.NumberFormat('es-ES', {
              style: 'currency', currency: 'EUR'
            }).format(v)
          },
          title: { display: true, text: 'Importe total (‚Ç¨)' }
        }
      },
      plugins: {
        legend: { display: true },
        tooltip: {
          callbacks: {
            label: function (ctx) {
              // Ocultar se o valor √© 0
              if (ctx.parsed.y === 0) {
                return null;
              }
              if (ctx.dataset.type === 'line') {
                return ctx.dataset.label + ': ' +
                  new Intl.NumberFormat('es-ES', {
                    style: 'currency', currency: 'EUR'
                  }).format(ctx.parsed.y);
              }
              return ctx.dataset.label + ': ' + ctx.parsed.y;
            }
          }
        }
      }
    }

  });
}





const TiposLabels = {{ .TiposLabels }};
const TiposCounts = {{ .TiposCounts }};
const ImpLabels   = {{ .ImpLabels }};
const ImpTotals   = {{ .ImpTotals }};
const AdxLabels   = {{ .AdxLabels }};
const AdxCounts   = {{ .AdxCounts }};
const AnexosLabels= {{ .AnexosLabels }};
const AnexosCounts= {{ .AnexosCounts }};

const AdxMesLabels   = {{ .AdxMesLabels }};
const AdxMesCounts   = {{ .AdxMesCounts }};
const AdxMesImportes = {{ .AdxMesImportes }};
const AdxMesSeries      = {{ .AdxMesSeries }};
const AdxMesCountsStack = {{ .AdxMesCountsStack }};

// üí° crear a gr√°fica inicial ‚Äúdesde cero‚Äù
renderAdxMensuais(AdxMesLabels, AdxMesSeries, AdxMesCountsStack, AdxMesImportes);

const TopLicLabels  = {{ .TopLicLabels }};
const TopLicAmounts = {{ .TopLicAmounts }};
const TopLicURLs    = {{ .TopLicURLs }};
const TopLicObjects  = {{ .TopLicObjects }};

const chTopImportes = new Chart(document.getElementById('chartTopImportes'), {
  type: 'bar',
  data: {
    labels: TopLicLabels,
    datasets: [{
      label: 'Importe (‚Ç¨)',
      data: TopLicAmounts,
      // feedback visual en hover:
      hoverBackgroundColor: 'rgba(76, 175, 80, 0.7)',  // verde ao pasar o rato
      hoverBorderColor: 'rgba(76, 175, 80, 1)',
      borderWidth: 1
    }]
  },
  options: {
    // para o plugin/click e para acceder dende o tooltip
    linkUrls:    TopLicURLs,
    linkObjects: TopLicObjects,

    indexAxis: 'y',
    responsive: true,
    plugins: {
      legend: { display: false },
      tooltip: {
        callbacks: {
          // t√≠tulo do tooltip: po√±emos a etiqueta (normalmente o expediente)
          title: (items) => {
            const i = items[0].dataIndex;
            return items[0].chart.data.labels[i] || '';
          },
          // li√±a principal: importe en ‚Ç¨
          label: (ctx) => {
            const v = ctx.parsed.x;
            return 'Importe: ' + new Intl.NumberFormat('es-ES', { style: 'currency', currency: 'EUR' }).format(v);
          },
          // bloque extra: Objeto del contrato
          afterBody: (items) => {
            const i   = items[0].dataIndex;
            const url = (chTopImportes.options.linkUrls || [])[i] || '';
            const exp = url.split('q=')[1] ? decodeURIComponent(url.split('q=')[1]) : '';

            const objs = items[0].chart.options.linkObjects || [];
            const obj = objs[i];

            return exp ? ['Expediente: ' + exp, 'Objeto: ' + obj] : [];
          }
        }
      }
    },
    scales: {
      x: {
        beginAtZero: true,
        ticks: { callback: v => new Intl.NumberFormat('es-ES',{style:'currency',currency:'EUR'}).format(v) },
        title: { display: true, text: 'Importe' }
      },
      y: { ticks: { autoSkip: false } }
    }
  }
});

// click nunha barra ‚Üí abre o expediente nunha pestana nova
document.getElementById('chartTopImportes').addEventListener('click', (evt)=>{
  const pts = chTopImportes.getElementsAtEventForMode(evt, 'nearest', {intersect: true}, true);
  if (!pts.length) return;
  const idx = pts[0].index;
  const urls = chTopImportes.options.linkUrls || [];
  const href = urls[idx];
  if (href) window.open(href, '_blank', 'noopener');
});


// Charts iniciais
const chTipos = new Chart(document.getElementById('chartTipos'), {
  type: 'bar',
  data: { labels: TiposLabels, datasets: [{ label: 'Contratos', data: TiposCounts }] },
  options: { 
    responsive: true,
    interaction: { mode: 'index', intersect: false, axis: 'x' },
    plugins:{ legend:{ display:false }, tooltip: { position: 'nearest' } } 
  }
});
const chImp = new Chart(document.getElementById('chartImportes'), {
  type: 'bar',
  data: { labels: ImpLabels, datasets: [{ label: '‚Ç¨ total', data: ImpTotals }] },
  options: {
    responsive: true,
    interaction: { mode: 'index', intersect: false, axis: 'x' },
    plugins:{ legend:{ display:false }, tooltip: { callbacks: {
      label: (ctx)=> new Intl.NumberFormat('es-ES',{style:'currency',currency:'EUR'}).format(ctx.parsed.y)
    }, position: 'nearest' }},
    scales: { y: { ticks: { callback: (v)=> new Intl.NumberFormat('es-ES').format(v) } } }
  }
});
const chAdx = new Chart(document.getElementById('chartAdxudicatarios'), {
  type: 'bar',
  data: { labels: AdxLabels, datasets: [{ label: 'Contratos', data: AdxCounts }] },
  options: { indexAxis: 'y', responsive: true, plugins:{ legend:{ display:false } }, scales: { x: { beginAtZero: true } } }
});
const chAnx = new Chart(document.getElementById('chartAnexos'), {
  type: 'pie',
  data: { labels: AnexosLabels, datasets: [{ data: AnexosCounts }] },
  options: { responsive: true }
});

// Instant search (3+ chars) + bot√≥n Aplicar
const form   = document.querySelector('form[role="search"]');
const qInput = form.querySelector('input[name="q"]');

function debounce(fn, ms){ let t; return (...a)=>{ clearTimeout(t); t=setTimeout(()=>fn(...a), ms); }; }

async function loadAll() {
  const q = (qInput.value || "").trim();
  if (q.length>0 && q.length<3) return;

  const params = new URLSearchParams({ q });
  const res = await fetch('/api/summary_all?' + params.toString(), { headers: { 'Accept':'application/json' } });
  if (!res.ok) return;

  const ct = res.headers.get('content-type') || '';
  if (!ct.includes('application/json')) {
    console.error('Esperaba JSON en /api/summary_all, chegou:', ct);
    return;
  }
  const data = await res.json();

  chTipos.data.labels = data.tiposLabels || [];
  chTipos.data.datasets[0].data = data.tiposCounts || [];
  chTipos.update();

  chImp.data.labels = data.impLabels || [];
  chImp.data.datasets[0].data = data.impTotals || [];
  chImp.update();

  chAdx.data.labels = data.adxLabels || [];
  chAdx.data.datasets[0].data = data.adxCounts || [];
  chAdx.update();

  chAnx.data.labels = data.anexosLabels || [];
  chAnx.data.datasets[0].data = data.anexosCounts || [];
  chAnx.update();

  chAdxMensuais.data.labels = data.adxMesLabels || [];
  chAdxMensuais.data.datasets[0].data = data.adxMesCounts || [];
  chAdxMensuais.data.datasets[1].data = data.adxMesImportes || [];
  chAdxMensuais.update();

  chTopImportes.options.linkUrls = data.topLicUrls || [];
  chTopImportes.options.linkObjects = data.topLicObjects || [];
  chTopImportes.data.labels = data.topLicLabels || [];
  chTopImportes.data.datasets[0].data = data.topLicAmounts || [];
  chTopImportes.update();
  // refrescar lista textual para poder seleccionar/copiar
  //renderTopList(data.topLicLabels, data.topLicUrls);

  // reload de data para importes
  renderAdxMensuais(
    data.adxMesLabels || [],
    data.adxMesSeries || [],
    data.adxMesCountsStack || [],
    data.adxMesImportes || []
  );

  // actualizar URL sen recargar
  const url = new URL(location.href);
  if (q) url.searchParams.set('q', q); else url.searchParams.delete('q');
  history.replaceState(null, '', url);
}

const loadDebounced = debounce(loadAll, 180);

form.addEventListener('submit', (e)=>{ e.preventDefault(); loadAll(); });
qInput.addEventListener('input', loadDebounced);
</script>

</body>
</html>
{{ end }}